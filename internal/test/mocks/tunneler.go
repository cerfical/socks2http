// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// Tunneler is an autogenerated mock type for the Tunneler type
type Tunneler struct {
	mock.Mock
}

type Tunneler_Expecter struct {
	mock *mock.Mock
}

func (_m *Tunneler) EXPECT() *Tunneler_Expecter {
	return &Tunneler_Expecter{mock: &_m.Mock}
}

// Tunnel provides a mock function with given fields: ctx, srcConn, dstConn
func (_m *Tunneler) Tunnel(ctx context.Context, srcConn net.Conn, dstConn net.Conn) error {
	ret := _m.Called(ctx, srcConn, dstConn)

	if len(ret) == 0 {
		panic("no return value specified for Tunnel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, net.Conn, net.Conn) error); ok {
		r0 = rf(ctx, srcConn, dstConn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tunneler_Tunnel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tunnel'
type Tunneler_Tunnel_Call struct {
	*mock.Call
}

// Tunnel is a helper method to define mock.On call
//   - ctx context.Context
//   - srcConn net.Conn
//   - dstConn net.Conn
func (_e *Tunneler_Expecter) Tunnel(ctx interface{}, srcConn interface{}, dstConn interface{}) *Tunneler_Tunnel_Call {
	return &Tunneler_Tunnel_Call{Call: _e.mock.On("Tunnel", ctx, srcConn, dstConn)}
}

func (_c *Tunneler_Tunnel_Call) Run(run func(ctx context.Context, srcConn net.Conn, dstConn net.Conn)) *Tunneler_Tunnel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(net.Conn), args[2].(net.Conn))
	})
	return _c
}

func (_c *Tunneler_Tunnel_Call) Return(_a0 error) *Tunneler_Tunnel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Tunneler_Tunnel_Call) RunAndReturn(run func(context.Context, net.Conn, net.Conn) error) *Tunneler_Tunnel_Call {
	_c.Call.Return(run)
	return _c
}

// NewTunneler creates a new instance of Tunneler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTunneler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tunneler {
	mock := &Tunneler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
